{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPAqYmCCv+XmQMU+Pw/zAOk"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":22,"metadata":{"id":"7Mj8AL6GMXhb","executionInfo":{"status":"ok","timestamp":1706769311670,"user_tz":-330,"elapsed":532,"user":{"displayName":"2203 A52130","userId":"00118844868297072646"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","from sklearn.preprocessing import MinMaxScaler"]},{"cell_type":"code","source":["data = {\n","    'Gender': [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2],\n","    'Age Range': [1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2],\n","    'Head Size(cm^3)': [4512, 3738, 4261, 3777, 4177, 3585, 3785, 3559, 3613, 3982, 3443, 3993, 3640, 4208, 3832],\n","    'Brain Weight(grams)': [1530, 1297, 1335, 1282, 1590, 1300, 1400, 1255, 1355, 1375, 1340, 1380, 1355, 1522, 1208]\n","}"],"metadata":{"id":"rixTUsXpX0Kp","executionInfo":{"status":"ok","timestamp":1706769313813,"user_tz":-330,"elapsed":4,"user":{"displayName":"2203 A52130","userId":"00118844868297072646"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["df = pd.DataFrame(data)\n","scaler = MinMaxScaler()"],"metadata":{"id":"g4lLuMGmX4g0","executionInfo":{"status":"ok","timestamp":1706769317138,"user_tz":-330,"elapsed":685,"user":{"displayName":"2203 A52130","userId":"00118844868297072646"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["df_scaled = pd.DataFrame(scaler.fit_transform(df[['Gender', 'Age Range', 'Head Size(cm^3)', 'Brain Weight(grams)']]), columns=['Gender', 'Age Range', 'Head Size(cm^3)', 'Brain Weight(grams)'])\n","print(df_scaled)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Bz3DZPR-YAER","executionInfo":{"status":"ok","timestamp":1706769320709,"user_tz":-330,"elapsed":608,"user":{"displayName":"2203 A52130","userId":"00118844868297072646"}},"outputId":"c158255c-bbd4-44ea-ff4c-3bd5ee891152"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["    Gender  Age Range  Head Size(cm^3)  Brain Weight(grams)\n","0      0.0        0.0         1.000000             0.842932\n","1      0.0        0.0         0.275959             0.232984\n","2      0.0        0.0         0.765201             0.332461\n","3      0.0        0.0         0.312442             0.193717\n","4      0.0        0.0         0.686623             1.000000\n","5      0.0        0.0         0.132834             0.240838\n","6      0.0        0.0         0.319925             0.502618\n","7      0.0        0.0         0.108513             0.123037\n","8      0.0        1.0         0.159027             0.384817\n","9      1.0        1.0         0.504210             0.437173\n","10     1.0        1.0         0.000000             0.345550\n","11     1.0        1.0         0.514500             0.450262\n","12     1.0        1.0         0.184284             0.384817\n","13     1.0        1.0         0.715622             0.821990\n","14     1.0        1.0         0.363891             0.000000\n"]}]},{"cell_type":"code","source":["import pandas as pd"],"metadata":{"id":"z06WojxmYRqv","executionInfo":{"status":"ok","timestamp":1706769585523,"user_tz":-330,"elapsed":7,"user":{"displayName":"2203 A52130","userId":"00118844868297072646"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["# Load the dataset (replace 'path_to_file' with the actual path to the downloaded CSV file)\n","file_path = '/content/housing.csv/california-housing-prices.zip'\n","housing_data = pd.read_csv('/content/housing.csv')\n"],"metadata":{"id":"igxl9Eg1ZSVF","executionInfo":{"status":"ok","timestamp":1706769706459,"user_tz":-330,"elapsed":818,"user":{"displayName":"2203 A52130","userId":"00118844868297072646"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["# a) Describe the data\n","data_description = housing_data.describe()\n","print(\"Data Description:\")\n","print(data_description)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BXjLH_BcZbWW","executionInfo":{"status":"ok","timestamp":1706769714787,"user_tz":-330,"elapsed":10,"user":{"displayName":"2203 A52130","userId":"00118844868297072646"}},"outputId":"0967398c-214f-4084-80d6-2548f6ee3807"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Data Description:\n","          longitude      latitude  housing_median_age   total_rooms  \\\n","count  20640.000000  20640.000000        20640.000000  20640.000000   \n","mean    -119.569704     35.631861           28.639486   2635.763081   \n","std        2.003532      2.135952           12.585558   2181.615252   \n","min     -124.350000     32.540000            1.000000      2.000000   \n","25%     -121.800000     33.930000           18.000000   1447.750000   \n","50%     -118.490000     34.260000           29.000000   2127.000000   \n","75%     -118.010000     37.710000           37.000000   3148.000000   \n","max     -114.310000     41.950000           52.000000  39320.000000   \n","\n","       total_bedrooms    population    households  median_income  \\\n","count    20433.000000  20640.000000  20640.000000   20640.000000   \n","mean       537.870553   1425.476744    499.539680       3.870671   \n","std        421.385070   1132.462122    382.329753       1.899822   \n","min          1.000000      3.000000      1.000000       0.499900   \n","25%        296.000000    787.000000    280.000000       2.563400   \n","50%        435.000000   1166.000000    409.000000       3.534800   \n","75%        647.000000   1725.000000    605.000000       4.743250   \n","max       6445.000000  35682.000000   6082.000000      15.000100   \n","\n","       median_house_value  \n","count        20640.000000  \n","mean        206855.816909  \n","std         115395.615874  \n","min          14999.000000  \n","25%         119600.000000  \n","50%         179700.000000  \n","75%         264725.000000  \n","max         500001.000000  \n"]}]},{"cell_type":"code","source":["# b) Find data type and shape of each column\n","data_info = housing_data.info()\n","print(\"\\nData Types and Shape:\")\n","print(data_info)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CzsmNxzxZx68","executionInfo":{"status":"ok","timestamp":1706769737263,"user_tz":-330,"elapsed":558,"user":{"displayName":"2203 A52130","userId":"00118844868297072646"}},"outputId":"83c35c4e-9eeb-428a-d360-dc71437bcd1d"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 20640 entries, 0 to 20639\n","Data columns (total 10 columns):\n"," #   Column              Non-Null Count  Dtype  \n","---  ------              --------------  -----  \n"," 0   longitude           20640 non-null  float64\n"," 1   latitude            20640 non-null  float64\n"," 2   housing_median_age  20640 non-null  float64\n"," 3   total_rooms         20640 non-null  float64\n"," 4   total_bedrooms      20433 non-null  float64\n"," 5   population          20640 non-null  float64\n"," 6   households          20640 non-null  float64\n"," 7   median_income       20640 non-null  float64\n"," 8   median_house_value  20640 non-null  float64\n"," 9   ocean_proximity     20640 non-null  object \n","dtypes: float64(9), object(1)\n","memory usage: 1.6+ MB\n","\n","Data Types and Shape:\n","None\n"]}]},{"cell_type":"code","source":["# c) Find null values and fill them with '0' or mean of the column\n","null_values = housing_data.isnull().sum()\n","print(\"\\nNull Values:\")\n","print(null_values)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S82umNbtZ3RF","executionInfo":{"status":"ok","timestamp":1706769773440,"user_tz":-330,"elapsed":693,"user":{"displayName":"2203 A52130","userId":"00118844868297072646"}},"outputId":"b9ad2c00-f2c4-452d-ed90-6df083bbc18e"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Null Values:\n","longitude               0\n","latitude                0\n","housing_median_age      0\n","total_rooms             0\n","total_bedrooms        207\n","population              0\n","households              0\n","median_income           0\n","median_house_value      0\n","ocean_proximity         0\n","dtype: int64\n"]}]},{"cell_type":"code","source":["# Assuming you want to fill null values with the mean of each column\n","housing_data_filled = housing_data.fillna(housing_data.mean())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1FyOowMtaDVN","executionInfo":{"status":"ok","timestamp":1706769796788,"user_tz":-330,"elapsed":631,"user":{"displayName":"2203 A52130","userId":"00118844868297072646"}},"outputId":"b8d3132d-0b1f-4df1-a54b-bc50a4d64ec8"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-33-06d0d5b77fb3>:2: FutureWarning: The default value of numeric_only in DataFrame.mean is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n","  housing_data_filled = housing_data.fillna(housing_data.mean())\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","df = pd.read_csv('/content/housing.csv')\n","\n","print(df.head())\n","\n","features = df.drop(columns=['median_house_value'])\n","\n","target = df['median_house_value']\n","\n","print(\"\\nFeatures:\")\n","print(features.head())\n","print(\"\\nTarget:\")\n","print(target.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_GOZjFx-dZ18","executionInfo":{"status":"ok","timestamp":1706770684846,"user_tz":-330,"elapsed":534,"user":{"displayName":"2203 A52130","userId":"00118844868297072646"}},"outputId":"4270f667-1f73-43b5-8537-e60932acfd8a"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["   longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\\n","0    -122.23     37.88                41.0        880.0           129.0   \n","1    -122.22     37.86                21.0       7099.0          1106.0   \n","2    -122.24     37.85                52.0       1467.0           190.0   \n","3    -122.25     37.85                52.0       1274.0           235.0   \n","4    -122.25     37.85                52.0       1627.0           280.0   \n","\n","   population  households  median_income  median_house_value ocean_proximity  \n","0       322.0       126.0         8.3252            452600.0        NEAR BAY  \n","1      2401.0      1138.0         8.3014            358500.0        NEAR BAY  \n","2       496.0       177.0         7.2574            352100.0        NEAR BAY  \n","3       558.0       219.0         5.6431            341300.0        NEAR BAY  \n","4       565.0       259.0         3.8462            342200.0        NEAR BAY  \n","\n","Features:\n","   longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\\n","0    -122.23     37.88                41.0        880.0           129.0   \n","1    -122.22     37.86                21.0       7099.0          1106.0   \n","2    -122.24     37.85                52.0       1467.0           190.0   \n","3    -122.25     37.85                52.0       1274.0           235.0   \n","4    -122.25     37.85                52.0       1627.0           280.0   \n","\n","   population  households  median_income ocean_proximity  \n","0       322.0       126.0         8.3252        NEAR BAY  \n","1      2401.0      1138.0         8.3014        NEAR BAY  \n","2       496.0       177.0         7.2574        NEAR BAY  \n","3       558.0       219.0         5.6431        NEAR BAY  \n","4       565.0       259.0         3.8462        NEAR BAY  \n","\n","Target:\n","0    452600.0\n","1    358500.0\n","2    352100.0\n","3    341300.0\n","4    342200.0\n","Name: median_house_value, dtype: float64\n"]}]},{"cell_type":"code","source":["features_encoded = pd.get_dummies(features, columns=['ocean_proximity'], drop_first=True)\n","\n","scaler = MinMaxScaler()\n","\n","scaled_features = scaler.fit_transform(features_encoded)\n","\n","df_scaled = pd.DataFrame(scaled_features, columns=features_encoded.columns)\n","\n","print(\"Normalized Data:\")\n","print(df_scaled.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SRYTZWdRdfAK","executionInfo":{"status":"ok","timestamp":1706770816095,"user_tz":-330,"elapsed":509,"user":{"displayName":"2203 A52130","userId":"00118844868297072646"}},"outputId":"4aeba6a0-1420-4e35-9365-2c5dcc3567b2"},"execution_count":52,"outputs":[{"output_type":"stream","name":"stdout","text":["Normalized Data:\n","   longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\\n","0   0.211155  0.567481            0.784314     0.022331        0.019863   \n","1   0.212151  0.565356            0.392157     0.180503        0.171477   \n","2   0.210159  0.564293            1.000000     0.037260        0.029330   \n","3   0.209163  0.564293            1.000000     0.032352        0.036313   \n","4   0.209163  0.564293            1.000000     0.041330        0.043296   \n","\n","   population  households  median_income  ocean_proximity_INLAND  \\\n","0    0.008941    0.020556       0.539668                     0.0   \n","1    0.067210    0.186976       0.538027                     0.0   \n","2    0.013818    0.028943       0.466028                     0.0   \n","3    0.015555    0.035849       0.354699                     0.0   \n","4    0.015752    0.042427       0.230776                     0.0   \n","\n","   ocean_proximity_ISLAND  ocean_proximity_NEAR BAY  \\\n","0                     0.0                       1.0   \n","1                     0.0                       1.0   \n","2                     0.0                       1.0   \n","3                     0.0                       1.0   \n","4                     0.0                       1.0   \n","\n","   ocean_proximity_NEAR OCEAN  \n","0                         0.0  \n","1                         0.0  \n","2                         0.0  \n","3                         0.0  \n","4                         0.0  \n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split(df_scaled, target, test_size=0.2, random_state=42)\n","\n","print(\"Train data shape:\", X_train.shape, y_train.shape)\n","print(\"Test data shape:\", X_test.shape, y_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Bt1kJAqCdlPj","executionInfo":{"status":"ok","timestamp":1706770820984,"user_tz":-330,"elapsed":541,"user":{"displayName":"2203 A52130","userId":"00118844868297072646"}},"outputId":"afd2483b-9fc8-42bd-84ac-2bfe61037364"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["Train data shape: (16512, 12) (16512,)\n","Test data shape: (4128, 12) (4128,)\n"]}]}]}